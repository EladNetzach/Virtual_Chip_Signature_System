// chip_tb.v
`timescale 1ns / 1ps

module chip_tb;
    // Parameters
    parameter DATA_WIDTH = 32;
    parameter ADDR_WIDTH = 10;

    // Clock and reset signals
    reg clk;
    reg rst;

    // Signals for Memory Loader
    reg [ADDR_WIDTH-1:0] address;
    wire [DATA_WIDTH-1:0] data_out;

    // Signals for ECDSA Signer
    reg [255:0] hash;
    reg [255:0] private_key;
    wire [511:0] signature;

    // Instantiate the Memory Loader
    Memory_Loader #(DATA_WIDTH, ADDR_WIDTH) memory_loader (
        .clk(clk),
        .rst(rst),
        .address(address),
        .data_out(data_out)
    );

    // Instantiate the ECDSA Signer
    ECDSA_Signer ecdsa_signer (
        .clk(clk),
        .rst(rst),
        .hash(hash),
        .private_key(private_key),
        .signature(signature)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 100 MHz clock
    end

    // VCD file generation
    initial begin
        $dumpfile("waveform.vcd"); // Specify the name of the VCD file
        $dumpvars(0, chip_tb);     // Dump all variables in the testbench
    end

    // Test sequence
    initial begin
        // Initialize signals
        rst = 1;
        address = 0;
        hash = 256'h0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef;
        private_key = 256'hfedcba9876543210fedcba9876543210fedcba9876543210fedcba9876543210;

        // Apply reset
        #10 rst = 0;

        // Test memory loader
        #10 address = 1;
        #10 address = 2;

        // Test ECDSA signer
        #20 hash = 256'habcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789;
        #20 private_key = 256'h123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef;

        // Finish simulation
        #100 $finish;
    end

    // Monitor outputs
    initial begin
        $monitor("Time: %0t | Address: %0d | Data Out: %h | Signature: %h", $time, address, data_out, signature);
    end
endmodule